from app.extensions import db
from sqlalchemy_utils import ChoiceType
import datetime

class ProfileModel(db.Model):
    __tablename__ = 'profiles'

    id          = db.Column(db.Integer, primary_key=True)
    title       = db.Column(db.String, unique=True, nullable=False)
    description = db.Column(db.Text)

    blocks      = db.relationship('ConfigurationModel',
                                  backref = 'profile')
    def set_default(self):
    {% for section in sections %}
        self.blocks.append({{section.label}}()) {% endfor %}

    def __repr__(self):
        return f'<Profile "{self.title}">'

class ConfigurationModel(db.Model):
    __tablename__ = 'block'

    id   = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.String)
    prof_id = db.Column(db.Integer, db.ForeignKey('profiles.id'))

    __mapper_args__ = {
        'polymorphic_identity': 'block',
        'polymorphic_on': 'type'
    }

    def __repr__(self):
        return f'<Block "{self.type}">'

{% for section in sections %}
class {{section.label}} (ConfigurationModel):
    __tablename__ = "{{section.label}}"

    id = db.Column(db.Integer, 
                   db.ForeignKey('block.id'), 
                   primary_key=True)

    {% for key,f in section.data.items() -%}
    {{key}} = db.Column({{f.mtype}}, info = {'label': '{{f.label}}'}, default = {{ f.default|repr }})
    {% endfor %}

    __mapper_args__ = {
        'polymorphic_identity': '{{section.label}}'
    }
{% endfor %}
