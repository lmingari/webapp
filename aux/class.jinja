{% macro parse_column(svar,var) -%}
{% if var.inputs|length == 1 -%}
    {% if var.inputs|first == 'float' -%}
        db.Column('{{svar}}', db.Float, info = {'label': '{{svar}}'}, default = {{var.default}})
    {%- elif var.inputs|first == 'integer' -%}
        db.Column('{{svar}}', db.Integer, info = {'label': '{{svar}}'}, default = {{var.default}})
    {%- else -%}
        db.Column('{{svar}}', db.String, info = {'label': '{{svar}}'}, default = "{{ var.default }}")
    {%- endif %}
{%- elif var.inputs == ['YES','NO'] or var.inputs == ['ON','OFF']-%}
        db.Column('{{svar}}', db.Boolean, info = {'label': '{{svar}}'})
{%- else -%}
    {% set tuples = [] -%}
    {% for input in var.inputs -%}
        {% set _ = tuples.append((input, input)) -%}
    {%- endfor -%}
    db.Column('{{svar}}', ChoiceType({{tuples}}), info = {'label': '{{svar}}'})
{%- endif %}
{%- endmacro %}
from app.extensions import db
from sqlalchemy_utils import ChoiceType

class ProfileModel(db.Model):
    __tablename__ = 'profiles'

    id          = db.Column(db.Integer, primary_key=True)
    title       = db.Column(db.String, unique=True, nullable=False)
    description = db.Column(db.Text)

    blocks      = db.relationship('ConfigurationModel',
                                  backref = 'profile')
    def set_default(self):
    {% for class in blocks %}
        self.blocks.append({{class}}()) {% endfor %}

    def __repr__(self):
        return f'<Profile "{self.title}">'

class ConfigurationModel(db.Model):
    __tablename__ = 'block'

    id   = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.String)
    prof_id = db.Column(db.Integer, db.ForeignKey('profiles.id'))

    __mapper_args__ = {
        'polymorphic_identity': 'block',
        'polymorphic_on': 'type'
    }

    def __repr__(self):
        return f'<Block "{self.type}">'

{% for name,block in blocks.items() %}
class {{name}} (ConfigurationModel):
    __tablename__ = "{{name}}"

    id = db.Column(db.Integer, 
                   db.ForeignKey('block.id'), 
                   primary_key=True)
    {% for svar,var in block.main.params.items() %}
    f{{ loop.index }} = {{ parse_column(svar,var) }} 
    {%- endfor %}

    __mapper_args__ = {
        'polymorphic_identity': '{{name}}'
    }
{% endfor %}
