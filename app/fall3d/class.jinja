from app.extensions import db
from sqlalchemy_utils import ChoiceType
import datetime

class ProfileModel(db.Model):
    __tablename__ = 'profiles'

    id          = db.Column(db.Integer, primary_key=True)
    title       = db.Column(db.String, unique=True, nullable=False)
    description = db.Column(db.Text)

    blocks      = db.relationship('ConfigurationModel',
                                  backref = 'profile',
                                  cascade = 'all, delete')
    def set_default(self):
    {% for slabel in sections %}
        self.blocks.append({{slabel}}()) {% endfor %}

    def __repr__(self):
        return f'<Profile "{self.title}">'

class ConfigurationModel(db.Model):
    __tablename__ = 'block'

    id   = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.String)
    prof_id = db.Column(db.Integer, db.ForeignKey('profiles.id'), nullable=False)

    __mapper_args__ = {
        'polymorphic_identity': 'block',
        'polymorphic_on': 'type'
    }

    def __repr__(self):
        return f'<Block "{self.type}">'

{% for slabel, section in sections.items() %}
class {{slabel}} (ConfigurationModel):
    __tablename__ = "{{slabel}}"

    id = db.Column(db.Integer, 
                   db.ForeignKey('block.id'), 
                   primary_key=True)

    {% for v,kfields in section.vars.items() -%}
    {% for key in kfields %}
    {{key}} = db.Column({{section[key].mtype}}, 
        {% if loop.first %}
        info = {'label': '{{section[key].variable}}'}, 
        {% elif section[key].label %}
        info = {'label': '{{section[key].label}}'}, 
        {% else %}
        info = {'label': 'none'}, 
        {% endif %}
        default = {{ section[key].default|repr }})
    {% endfor %}
    {% endfor %}

    __mapper_args__ = {
        'polymorphic_identity': '{{slabel}}'
    }
{% endfor %}
